class TransactionPool:
    def __init__(self):
        self.transaction_map = {}    # empty dict

    def set_transaction(self, transaction):
        """
        Set a transaction in the transaction pool.
        """
        self.transaction_map[transaction.id] = transaction
        # transactions will be stored as object {"646839": transaction_obj}

    def existing_transaction(self, address):
        """
        Find a transaction generated by the address in the transaction pool
        If in transaction object, input is dict, key is 'address' matches to current
        address then return transaction
        """
        for transaction in self.transaction_map.values():
            if transaction.input['address'] == address:     # address is (wallet.address)
                return transaction

    def transaction_data(self):
        """
        Return the transactions of the transaction pool represented in their
        json serialized form.
        Returns as the list and transaction objects as json serialized as {"x" : 20 }
        """
        transaction_objects_data_in_serialized_form = list(map(
            lambda transaction: transaction.to_json(),
            self.transaction_map.values()
        ))
        return transaction_objects_data_in_serialized_form
    # converts the transaction object into json and converts all of them into pack of list [{},{},...]

    def clear_blockchain_transactions(self, blockchain):
        """
        Delete blockchain recorded transactions from the transaction pool.
        """
        for block in blockchain.chain:
            for transaction in block.data:
                try:
                    del self.transaction_map[transaction['id']]
                    # deletes the key in map_dictionary with id  (line 10)
                except KeyError:
                    pass
